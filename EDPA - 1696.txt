#include <stdio.h>
#include <stdlib.h>

/*
typedef struct tree
{
  int num;
  struct tree* dir;
  struct tree* esq;
} Tree;
*/

/*
Tree* createTree()
{
  return NULL;
}
*/

//Criar função inverte jogadores

//Criar função de árvores

/*Função principal*/
int main(){
    char p1[] = "sanches";
    char p2[] = "rusa";
    char swap[] = "sanches";
    printf("player 1: %s \n", p1);
    printf("player 2: %s \n", p2);

    int *vetor;
    int *vetor_de_zeros;
    int t, n, q;
    int indice;
    int valor;
    int i, j, k, l;

    //A primeira linha de entrada se refere a quantidade testes a ser feita (não inclui nessa conta, as substituições, só testes no vetor original)
    printf("Quantos testes voce deseja fazer? ");
    scanf("%d", &t);
    printf("Nesta execucao serao realizados %d testes \n", t);

    //A segunda linha da entrada refere-se a N (tamanho do vetor a testar) e Q (quantidade de substituições que serão feitas dentro do vetor para testar).
    for(i=0;i<t;i++){
        printf("\nTeste numero %d\n", i+1);
        printf("Entre com os parametros N (tamanho do vetor) e Q (numero de substituicoes): ");
        scanf("%d %d",&n, &q);
        printf("O tamanho do vetor sera %d.\n", n);
        printf("Serao feitas %d substituicoes.\n", q);

        vetor = (int *)malloc(n);
        vetor_de_zeros = (int *)malloc(n-1);

        for(j=0;j<n;j++){
            printf("Entre com cada elemento do vetor de teste: ");
            scanf("%d", &vetor[j]);
        }
        printf("\nVetor adicionado:\n");
        for(j=0;j<n;j++){
            printf("%d", vetor[j]);
        }
        //Chamar funcao para preencher arvore, solucionar e imprimir resposta

        //Caso tenha substituições, o vetor tem que ser modificado, e resolver o problema novamente, imprimindo resultados, porém sem alternar entre jogadores.
        if(q>0){
          for(k=0;k<q;k++){
            printf("\nSubstituicao de numero %d", k+1);
            printf("\nEntre com o indice (A) a ser substituido no vetor e o valor (B) que deseja inserir no lugar: ");
            scanf("%d %d", &indice, &valor);
            printf("\nSubstituiremos o valor do indice %d pelo valor %d", indice, valor);
            printf("\nValor antigo: %d", vetor[indice-1]);
            printf("\nValor novo: %d", valor);
            vetor[indice-1]=valor;

            printf("\nNovo vetor: ");
            for(l=0;l<n;l++){
                printf("%d", vetor[l]);
            }
            //Chamar funcao para preencher arvore, solucionar e imprimir resposta*/
          }
        }
        //Ao final de cada rodada alternam-se os jogadores
        /*
        Fazer função pra alternar jogadores (copiar strings)
        swap = p1;
        p1 = p2;
        p2 = swap;
        */
    }

    return 0;

}
